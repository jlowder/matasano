Answers for set5:

// ------------------------------------------------------------

33. Output of running racket on "33/test.rkt":

using values: a=21, A=23, b=1, B=5, g=5, p=37
keys: 23 23
**pass
using values: a=620398331401408260411228509458978482604166905593667872221570016725971003244890413849584985150954022396919993895431464116043759268498045882858427943648519653030657079243860542696057864517296145757685774076261908689684003405408964113162927776411088134492673624265187356614771053726806283147791845596864916263653866597398689615985305482636711817801328091672322360881815393633867184876249334110992244207176115777154164715710401449610352223854281459204332027153257781, A=88371370700590572359632577056753974557857035301781924189999561456340923773947789778153040393333618636975518892063334174696022098296484616314446332088971688279356765501265479856502825451738627580163284208920351660379580879043175522130551145401093087080126683172990137449964718097480535255755707585011646505182652500847610638257111462764388586701506144075027835470832705773746450677773696395266165434450500629090788936238704218477253819006252072375889451604570048, b=1776884289301830701459410013182201085013720031877332025968325800698858689612886313698871724196279939917292711474951087670899522921303738969985523716946015833242867923686228491345382531082028484430830349664713434618119778595715655862302417354393498064449619772613227326827416574738759258398633951810571778303019673575202540078551333520059126255207511857396510129892230679910266070217679787095410831508846533733144362166563308564777083779589272548114803563419205608, B=533886798575561874893873607217309840362684081380141681923857313906260237710972568265245537855128695583494533483261502626345946230343640452009837328636629151605458946140071277117611458291945265906272091994203166382782256606135814136493112418942080736240071668787632424712839417563695571065095177554775983703185392398906830383840900902393705858935366130101518213136401492504076190428527311448962411417656395513017301903610445173384655072622680807382803529121947295, g=2, p=2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
keys: 2052017473958899505114387992900237324815588306702267877188956345545396658018324404823293428965451212063159285141856494032502001691292836063908905721392283668275923363261211629244682034216418669707265499055868855971550659315441457663541001077260141891550919615635099315845807638574883211791301097608069873487150271790655441615852512531874810701599677779967631885693291743115590470366187616201184373514728331446759474427595407823610611744355349282635719058763335806 2052017473958899505114387992900237324815588306702267877188956345545396658018324404823293428965451212063159285141856494032502001691292836063908905721392283668275923363261211629244682034216418669707265499055868855971550659315441457663541001077260141891550919615635099315845807638574883211791301097608069873487150271790655441615852512531874810701599677779967631885693291743115590470366187616201184373514728331446759474427595407823610611744355349282635719058763335806
**pass

// ------------------------------------------------------------

34. Output of running racket on "34/test.rkt":

First part: test without a MITM
112
B received: 6d0a5b7fe66207f6ef20619865c8dd533424605d07e2b9a201bb7b0a8f7423cecc9326286e5735d97d8cdd26f7c818c07cb26446d817a54cfabbd3ea4efc1658ab261cd33a186ba652c3453bd23abe0e93f41d2ee1c52dba48b8ff4d4e1c1781632c43fa7de04f85c45724d63862ab1e
B decrypted: #"Logic clearly dictates that the needs of the many outweigh the needs of the few."
112
A received: a663e976e93a37ec05d52a4f6a030c01f463206f5a7b1595837e2b28096208d8cc0dabccc52a93750430d60b0025ddc135b4c3edea6adf1d54edbb33ecf7ced37d9983900d0ba0c0cedc5ac351499e9d424e46b960103eab994288adf911fe48292cc0f4db9c4c4622da0b0029a33fce
A decrypted: #"Logic clearly dictates that the needs of the many outweigh the needs of the few."
112


Second part: test with a MITM
112
M: read ab52da4ba67adee4400accb050152201ecb023831f0335ba29d905585ff96539f3e00a9cd86d38450f69134fa562a7c30cf4f64ac5e7df2d88afd5d61f1245a8fda677baabdf77911a5df2c3c2ede31a9cf4c823925841ef2dd89c2aa6123256be472af6f4b5c60998b156d306053a42 from A
M: decrypting A's message to #"Computers make excellent and efficient servants, but I have no wish to serve under them."
B received: ab52da4ba67adee4400accb050152201ecb023831f0335ba29d905585ff96539f3e00a9cd86d38450f69134fa562a7c30cf4f64ac5e7df2d88afd5d61f1245a8fda677baabdf77911a5df2c3c2ede31a9cf4c823925841ef2dd89c2aa6123256be472af6f4b5c60998b156d306053a42
B decrypted: #"Computers make excellent and efficient servants, but I have no wish to serve under them."
M: read a9c93429e1c9f6f66aecd00680d44ae8936887b76be501e63e3a9f13eee8191612767e8f037551570e0cc7db7585d43075d5d4e574ea9f3cdcc4a712b8079082c4bfad851f830469c97d9ee74fa013de9da662c93eabbb3bf6cec8fef4bd524bc540b6707603437e2f2412a836f031c3 from B
M: decrypting B's return message to #"Computers make excellent and efficient servants, but I have no wish to serve under them."
A received: a9c93429e1c9f6f66aecd00680d44ae8936887b76be501e63e3a9f13eee8191612767e8f037551570e0cc7db7585d43075d5d4e574ea9f3cdcc4a712b8079082c4bfad851f830469c97d9ee74fa013de9da662c93eabbb3bf6cec8fef4bd524bc540b6707603437e2f2412a836f031c3
A decrypted: #"Computers make excellent and efficient servants, but I have no wish to serve under them."
112

// ------------------------------------------------------------

35. Output of running racket on "35/test.rkt":

First: test without a MITM
p: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919 g: 2
64
B received: cde5a8f6a7c0c1d252dd321e08b7c894cc4b91bf3fb0a279796b19fcac60ea4819b3e06218fbfdb9e668bed14b9a1228a854f8d5dee2474821e6b0eafb825b05
B decrypted: #"This is a test with no man in the middle."
64
A received: 83a43f77df8f5430e28aa79912ef5c51135bfd1020690cef351bd52ab81e1efd458d482ceefdd44c8074da50a5f76fb57f4087db144b1cc64d4608c87c9882c5
A decrypted: #"This is a test with no man in the middle."
64


test with a MITM, g=1
"resetting participant"
"resetting participant"
p: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919 g: 1
p: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919 g: 1
64
M: read from A: cde5a8f6a7c0c1d252dd321e08b7c894afc387207de66cf39139ce9af7b7398d411f110be295f447c14c6dd2890c97b1e3979fe9693241267206208c9c7a79a5
M: decrypting A's message to #"This is with a man in the middle using g=1"
B received: cde5a8f6a7c0c1d252dd321e08b7c894afc387207de66cf39139ce9af7b7398d411f110be295f447c14c6dd2890c97b1e3979fe9693241267206208c9c7a79a5
B decrypted: #"This is with a man in the middle using g=1"
M: read from B: 83a43f77df8f5430e28aa79912ef5c51e62c902b9a2da68187e81456d74611731b5713358709305901a8125701939b4a450dd223f80bcb5d6dd5743e3188cbeb
M: decrypting B's return message to #"This is with a man in the middle using g=1"
A received: 83a43f77df8f5430e28aa79912ef5c51e62c902b9a2da68187e81456d74611731b5713358709305901a8125701939b4a450dd223f80bcb5d6dd5743e3188cbeb
A decrypted: #"This is with a man in the middle using g=1"
64


test with a MITM, g=p
"resetting participant"
"resetting participant"
p: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919 g: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
p: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919 g: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
64
M: read from A: cde5a8f6a7c0c1d252dd321e08b7c894a9c286690df1ff40bf0da3bb645659d59ed455aad5c6101f2722ddffc4674c216e4303cce6e26289066ea0bf636797f4
M: decrypting A's message to #"This is with a man in the middle using g=p"
B received: cde5a8f6a7c0c1d252dd321e08b7c894a9c286690df1ff40bf0da3bb645659d59ed455aad5c6101f2722ddffc4674c216e4303cce6e26289066ea0bf636797f4
B decrypted: #"This is with a man in the middle using g=p"
M: read from B: 83a43f77df8f5430e28aa79912ef5c515a61200ae92ac1fc0c933b9c52a41ba9497a6eee79a43a5a49212d21873968bd3e8f91e7010e0532d06ac17efc0eba6b
M: decrypting B's return message to #"This is with a man in the middle using g=p"
A received: 83a43f77df8f5430e28aa79912ef5c515a61200ae92ac1fc0c933b9c52a41ba9497a6eee79a43a5a49212d21873968bd3e8f91e7010e0532d06ac17efc0eba6b
A decrypted: #"This is with a man in the middle using g=p"
64


test with a MITM, g=(p-1)
"resetting participant"
"resetting participant"
p: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919 g: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633918
p: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919 g: 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633918
64
M: read from A: cde5a8f6a7c0c1d252dd321e08b7c894afc387207de66cf39139ce9af7b7398d411f110be295f447c14c6dd2890c97b116cdbfaf78ce743b20d487607b2d9c1e
M: decrypting A's message to #"This is with a man in the middle using g=(p-1)"
B received: cde5a8f6a7c0c1d252dd321e08b7c894afc387207de66cf39139ce9af7b7398d411f110be295f447c14c6dd2890c97b116cdbfaf78ce743b20d487607b2d9c1e
B decrypted: #"This is with a man in the middle using g=(p-1)"
M: read from B: 83a43f77df8f5430e28aa79912ef5c51e62c902b9a2da68187e81456d74611731b5713358709305901a8125701939b4ab7a30638c89a20b5a9aabb809948ca8c
M: decrypting B's return message to #"This is with a man in the middle using g=(p-1)"
A received: 83a43f77df8f5430e28aa79912ef5c51e62c902b9a2da68187e81456d74611731b5713358709305901a8125701939b4ab7a30638c89a20b5a9aabb809948ca8c
A decrypted: #"This is with a man in the middle using g=(p-1)"
64

// ------------------------------------------------------------

36. Output of running racket on "36/test.rkt":

-------> C & S           Agree on N=[NIST Prime], g=2, k=3, I (email), P (password)
N=2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919 g=2 k=3 I=ice@itsnotreal.com P=0x76616E696C6C61 
-------> S               1. Generate salt as random integer
salt=0x08 
------->                 2. Generate string xH=SHA256(salt|password)
xH=0x0AC83CB41F753AC31C037CF5363072CFFEB6A4A4A5E9D20388AD7D1F459FC24C 
------->                 3. Convert xH to integer x somehow (put 0x on hexdigest)
x=4876916859672454747747525811179202557238970395427794428121552591539769688652 
------->                 4. Generate v=g**x % N
v=73684017098892364221433086259367320176388102299738634414339555958307005416294085733162209318559134480146718302850144274362408486193959095040373372753445921089261996894170820850125843767939536858757002362560969299161652277389103747306835904268168962352087150280559466020118261147335160183329580597316797381860152750426705337891015534973714111482645661730875588973840387299468326761378903475209736591192991284932398631541861787156716513004059580806103432870593479 
-------> C->S            Send I, A=g**a % N (a la Diffie Hellman)
I=ice@itsnotreal.com A=995852838360024152510682292167655664213210538754158522745970188978974320664422214587944698008129049812955209309735095948835453762627087851258574908617995683791934269451327191023600194905579640858501049787235363509847704810285014612320543829224675714016472699377632709335147230615360193996829422909251980857296297887054955187493897415727561782970512284593744580087351105833294942244791850063713373451852338516153675161438824453905909967082989209866889779484812879 
-------> S->C            Send salt, B=kv + g**b % N
salt=0x08 B=982068171916934347884650112952987848889998291809188836586880496050438963826258945561790983212560162332261288686756097091182433868639197606407872475997521884590304407272863631441435950017812657588503791142608463259191847640019352165095892039435725444539907396166245347228240554091553203115114073131374412848258050915292899259602009205238874040753024209191606066111620310154699355892316045312176387345468054109099233123524905122561509469753382723619702029876698288 
-------> S, C            Compute string uH = SHA256(A|B), u = integer of uH
uH=0xD5B5D15FC91641A329E1ED4C9A90A2C034445467029FE8B6BA38FB749C2BDC79 u=96663881114318967269927654764931553169735477950387714984994453605874353822841 
-------> C               1. Generate string xH=SHA256(salt|password)
xH=0x0AC83CB41F753AC31C037CF5363072CFFEB6A4A4A5E9D20388AD7D1F459FC24C 
------->                 2. Convert xH to integer x somehow (put 0x on hexdigest)
x=4876916859672454747747525811179202557238970395427794428121552591539769688652 
------->                 3. Generate S = (B - k * g**x)**(a + u * x) % N
S=2149098030454953274804426638092262339477441122626109273245674979437104270972283211474711303604602116312226627511752559586740776321021249191579045274121390822162148996335079169540247549790991959278607902563407111984232810877134451497634338659155711688978025092115940164280964889923701025781622307118084641123489590432153311533439384147135022880162298306261250774384895496210542071682748806430549477069370300326926191218768286447100521131854558514953754361382179986 
------->                 4. Generate K = SHA256(S)
K=0x70366ECC9ECDBB0E4ADDDDF64CF4169C01E6762E50F4C29434AE57B6FC1E924D 
-------> S               1. Generate S = (A * v**u) ** b % N
S=2149098030454953274804426638092262339477441122626109273245674979437104270972283211474711303604602116312226627511752559586740776321021249191579045274121390822162148996335079169540247549790991959278607902563407111984232810877134451497634338659155711688978025092115940164280964889923701025781622307118084641123489590432153311533439384147135022880162298306261250774384895496210542071682748806430549477069370300326926191218768286447100521131854558514953754361382179986 
------->                 2. Generate K = SHA256(S)
K=0x70366ECC9ECDBB0E4ADDDDF64CF4169C01E6762E50F4C29434AE57B6FC1E924D 
-------> C->S            Send HMAC-SHA256(K, salt)
H-C-K=0xF4775380CF3B2F7EA5FBB0C0639364E2BD9E2418E665C1928A3BA6CE749C222E 
-------> S->C            Send "OK" if HMAC-SHA256(K, salt) validates
OK

// ------------------------------------------------------------

37. Output of running racket on "37/test.rkt":

-------> Following normal protocol
in-I=ice@itsnotreal.com in-A=610189685047412506440324220620401932087440653457376988955122679338566425737571002916018357756008430014064859002785462882816245064663976970159452212341478964955522583604040480556632694874867704578664301186361433788206417914586866393248113053165245493386519978276485104975453137677082923347688456502253825826213095833464875349790787105235604727428650651881965186085098500466768749312699176644204125340375686871998972757677898675011189076169295744070929886281690450 
NaCl=0x03 B=6591131367941372501288214500457653733225157405768376127378587224888332977827201792679405525969500595253259561927037638122072129281410627284556614900581115177467814989410675089251225310049960125957580297462018027388933281044512132423134403249545610382003375124613767618158385674737106533871431737271742102012342153144440961784964963217939420677238540408075928505385103071205089579233747029300476669947853941591614882352677951969674469802061997088978709304459128530 
in-cert=0xB7BC71EFD0CD7868E163942DCA1BE1EA125AD6DF8D05C3B9E547A9FA584E10BB 
"OK"
-------> Following normal protocol, but with invalid password
in-I=ice@itsnotreal.com in-A=610189685047412506440324220620401932087440653457376988955122679338566425737571002916018357756008430014064859002785462882816245064663976970159452212341478964955522583604040480556632694874867704578664301186361433788206417914586866393248113053165245493386519978276485104975453137677082923347688456502253825826213095833464875349790787105235604727428650651881965186085098500466768749312699176644204125340375686871998972757677898675011189076169295744070929886281690450 
NaCl=0x03 B=6591131367941372501288214500457653733225157405768376127378587224888332977827201792679405525969500595253259561927037638122072129281410627284556614900581115177467814989410675089251225310049960125957580297462018027388933281044512132423134403249545610382003375124613767618158385674737106533871431737271742102012342153144440961784964963217939420677238540408075928505385103071205089579233747029300476669947853941591614882352677951969674469802061997088978709304459128530 
in-cert=0xFA0BE070AFAFE3463E17E6E2CB635E78087349160EC68E33462E9D771C430060 
"FAIL"
-------> Setting A to zero and forgetting password
in-I=ice@itsnotreal.com in-A=0 
NaCl=0x03 B=6591131367941372501288214500457653733225157405768376127378587224888332977827201792679405525969500595253259561927037638122072129281410627284556614900581115177467814989410675089251225310049960125957580297462018027388933281044512132423134403249545610382003375124613767618158385674737106533871431737271742102012342153144440961784964963217939420677238540408075928505385103071205089579233747029300476669947853941591614882352677951969674469802061997088978709304459128530 
in-cert=0x80A89FFB1A741D3F2E9BEACC53CD5BF1FB35B6902AC1DA314CD201A1C4C8E521 
"OK"
-------> Setting A to N
in-I=ice@itsnotreal.com in-A=2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919 
NaCl=0x03 B=6591131367941372501288214500457653733225157405768376127378587224888332977827201792679405525969500595253259561927037638122072129281410627284556614900581115177467814989410675089251225310049960125957580297462018027388933281044512132423134403249545610382003375124613767618158385674737106533871431737271742102012342153144440961784964963217939420677238540408075928505385103071205089579233747029300476669947853941591614882352677951969674469802061997088978709304459128530 
in-cert=0x80A89FFB1A741D3F2E9BEACC53CD5BF1FB35B6902AC1DA314CD201A1C4C8E521 
"OK"
-------> Setting A to N*2
in-I=ice@itsnotreal.com in-A=4820624853842065177104152044395132149713901097004919885308233883916217663365224457780187716522683229346454282955808024393007297914101165263885461413610018446125469490682146813392492029178723319548082054338498906400757458868340651687557318396287526387553719739048177880391154692239687090603094087494415499939527500168617852678591119937764915744825987620258260589185999895852730528118569294419460769894423362868929428876977041880254919688577718673053792641839267838 
NaCl=0x03 B=6591131367941372501288214500457653733225157405768376127378587224888332977827201792679405525969500595253259561927037638122072129281410627284556614900581115177467814989410675089251225310049960125957580297462018027388933281044512132423134403249545610382003375124613767618158385674737106533871431737271742102012342153144440961784964963217939420677238540408075928505385103071205089579233747029300476669947853941591614882352677951969674469802061997088978709304459128530 
in-cert=0x80A89FFB1A741D3F2E9BEACC53CD5BF1FB35B6902AC1DA314CD201A1C4C8E521 
"OK"
-------> Setting A to N*5
in-I=ice@itsnotreal.com in-A=12051562134605162942760380110987830374284752742512299713270584709790544158413061144450469291306708073366135707389520060982518244785252913159713653534025046115313673726705367033481230072946808298870205135846247266001893647170851629218893295990718815968884299347620444700977886730599217726507735218736038749848818750421544631696477799844412289362064969050645651472964999739631826320296423236048651924736058407172323572192442604700637299221444296682634481604598169595 
NaCl=0x03 B=6591131367941372501288214500457653733225157405768376127378587224888332977827201792679405525969500595253259561927037638122072129281410627284556614900581115177467814989410675089251225310049960125957580297462018027388933281044512132423134403249545610382003375124613767618158385674737106533871431737271742102012342153144440961784964963217939420677238540408075928505385103071205089579233747029300476669947853941591614882352677951969674469802061997088978709304459128530 
in-cert=0x80A89FFB1A741D3F2E9BEACC53CD5BF1FB35B6902AC1DA314CD201A1C4C8E521 
"OK"
-------> Setting A to N*200
in-I=ice@itsnotreal.com in-A=482062485384206517710415204439513214971390109700491988530823388391621766336522445778018771652268322934645428295580802439300729791410116526388546141361001844612546949068214681339249202917872331954808205433849890640075745886834065168755731839628752638755371973904817788039115469223968709060309408749441549993952750016861785267859111993776491574482598762025826058918599989585273052811856929441946076989442336286892942887697704188025491968857771867305379264183926783800 
NaCl=0x03 B=6591131367941372501288214500457653733225157405768376127378587224888332977827201792679405525969500595253259561927037638122072129281410627284556614900581115177467814989410675089251225310049960125957580297462018027388933281044512132423134403249545610382003375124613767618158385674737106533871431737271742102012342153144440961784964963217939420677238540408075928505385103071205089579233747029300476669947853941591614882352677951969674469802061997088978709304459128530 
in-cert=0x80A89FFB1A741D3F2E9BEACC53CD5BF1FB35B6902AC1DA314CD201A1C4C8E521 
"OK"

// ------------------------------------------------------------

38. Output of running racket on "38/test.rkt":

-------> S               x = SHA256(salt|password)
salt=0x03 P=0x76616E696C6C61 Sx=0x47E38B04783F5A6921111D552A37E96B50DB069FC57D2A3E0489444CAF245D34 
------->                 v = g**x % n
g=2 v=1537791003661407692485395820559912877923663543616790829145973239464625888658471114869803146858803139903496349523943498681359114765576371140585161546007596278256643611415945253654813616996085134756890228695713593928451673297539964252077501332160823222532750399713524351780026729552699619697413386914900804997880759254036674542107109145241094645419036051253796392230402175061450637845651779309430562874215436783812997860139534038566403275763991133129781649627047812 
-------> C->S            I, A = g**a % n
I=ice@itsnotreal.com A=238794577014625705766148168477589567724825036150507568419739862145133395149590271934775181282349800806656774069590931764109969846611145932940318796633861710813900040296591043414373477341387858422695860896550178295878638693363588200145838943863537599977616990013541075157772718678550367767201506034867720370401299160558394469366093684026366051908852191133970099659084695885187411238427897818368574329741296913466055616276197885886337813191208203965314765540181028 
-------> S->C            salt, B = g**b % n, u = 128 bit random number
salt=0x03 B=802205856450527642835278577527949518287205562171718992546342743934819712157690878895233678778742300319521710237130597802519179712857988018172648944731694295284453750419864672115470901045532968039167175552925089593676634792648972229213296136005849933892447600395930007348073706232910035169048284553060359175669728977177299070433599785255252463696584231362842656594617815697838114430815919311243850580656766579918825230926574596030734384509673775024285340832148146 u=60240995238997829632140578779206863965 
-------> C               x = SHA256(salt|password)
Cx=0x47E38B04783F5A6921111D552A37E96B50DB069FC57D2A3E0489444CAF245D34 
------->                 S = B**(a + ux) % n
Cs=19214444952604710073049100954678925627061964047596904191657326743227592708325735962796294944992981413428247371318701948434167443920789920455354714772344054434683919878440358058678032750211108209569765078149096209076030800731353369344360130764245978429069251099069433989531956751319398197041284372464413946654507800308919166841002358525062991574721756728177443866151613650918169693959964252183204410966822832712560511355774572924568179408835503856310883010147670 
------->                 K = SHA256(S)
Ck=0xA1E74D9AD8F109E39F67BB2C8ED2623B8B33888C3C6E0761E547A01C6FAFC8DD 
-------> S               S = (A * v ** u)**b % n
Ss=19214444952604710073049100954678925627061964047596904191657326743227592708325735962796294944992981413428247371318701948434167443920789920455354714772344054434683919878440358058678032750211108209569765078149096209076030800731353369344360130764245978429069251099069433989531956751319398197041284372464413946654507800308919166841002358525062991574721756728177443866151613650918169693959964252183204410966822832712560511355774572924568179408835503856310883010147670 
------->                 K = SHA256(S)
Sk=0xA1E74D9AD8F109E39F67BB2C8ED2623B8B33888C3C6E0761E547A01C6FAFC8DD 
-------> C->S            Send HMAC-SHA256(K, salt)
Client-HMAC-SHA256=0x8FB0C8525BE55F8F1D6DDDDD94167AD9D91A6DD48F8977CDDFA651D9D70CCD89 
-------> S->C            Send "OK" if HMAC-SHA256(K, salt) validates
"OK"
[Redoing with MITM attacker posing as server]
-------> Seting salt to arbitrary value
salt=0x00 
-------> C->S            I, A = g**a % n
I=ice@itsnotreal.com a=2014702408805641686010754137411380955121722801187376906434796426736586379178474027046317417379773033543965306730977155931220919242321750398513727294301988793458865280902255512446702748765910508328787364608286009421145797561609555550155848481139625856775534686929987163076050354533263632192780439144308034080238951646513098797218272430544304939302765413530696069308614570559659931493602888234532828939625619457939097940355781651631711912756417253503151324777930296 A=2069113084839916069637345881261806497782937882327444189851911058832079266527707280504112719439396271133173570036335206659544190741989755045943450251176191604512996438618502340615321931829918240292411594166671687260709028063574026785106962350845055550562928550252078481095409570235628619594661436301153742969802028268401297723776692330694453639850397413586213981562333928377501972111099537599452817569276382844911498861595903124378426088609106081424362346803250821 
-------> S->C            salt, B = g**b % n, u = 128 bit random number
salt=0x00 B=1031837709549541774520827864477264087912595936629668231745997347047721372538823596105084971125442407309475958458827487970441212835829069357504151712259688086459754268023383924017917705383751025323870039768713732614098652508462707819527835686504939312240123870887075850383361693515342223215058092671483588906885613536996493238713573435819173504708379609899659412616683344185894550867730133719679351466965956314152391475141813382356891191154279083033941674352037552 u=1 
-------> C               x = SHA256(salt|password)
Cx=0xAC230ABBFC28CDE26032C7A2A83EDB7BDA127BA2BB5984345EA6DE41BE25228B 
------->                 S = B**(a + ux) % n
Cs=1390597309329193021955336100966130564628035054484590835911774696534723959453841508283818528809066524915548074264528653843592877842168650007594565378887807603349989364195574441403323884373179889559345566575870993074068423904871388050165933886204295253684243650469861553599792665151306845999083284452131747031238600809569564251626619354390055844857975499324421569102443586631287445385905013644966522734504274184142588015770914238859200523494532477191656570554297014 
------->                 K = SHA256(S)
Ck=0xF0DBFCEF19D4FE156680A1D53324111ABB27926588648AF6340CB07A803D21AE 
-------> C->S            Send HMAC-SHA256(K, salt)
Client-HMAC-SHA256=0x9084946384DF7C35DC92BB40E175159A3AB7C3193EA627203586AE879E2F50E1 
[performing dictionary search]
found the password!
-------> vanilla

// ------------------------------------------------------------

39. Output of running racket on "39/test.rkt":

-------> - Generate 2 random primes. We'll use small numbers to start, so you
------->   can just pick them out of a prime table. Call them "p" and "q".
p=467 q=383 
-------> - Let n be p * q. Your RSA math is modulo n.
n=178861 
-------> - Let et be (p-1)*(q-1) (the "totient"). You need this value only for
------->   keygen.
et=178012 
-------> - Let e be 3.
e=3 
-------> - Compute d = invmod(e, et). invmod(17, 3120) is 2753.
d=118675 
-------> Your public key is [e, n]. Your private key is [d, n].
public-key=(3 178861) private-key=(118675 178861) 
-------> To encrypt: c = m**e%n. To decrypt: m = c**d%n
-------> Test this out with a number, like "42".
m=42 c=74088 m1=42 
-------> Repeat with bignum primes (keep e=3).
p=1118534322184010997187912143247526748026617325273089222622399611128596681859356278389662198526747206627144067482489858430084432878104970142253896718237605451302008262453626035704355939542001462463561804578290835636380436320210678320027845698381069061116688057945566097176061792037316102743047516131840939199820370454733315802436532354796273523156736603391965510307633148434066882699429072237762067409435958353891024391537993834751550100597187583766460655833428719 q=45831845721607928795995541520943089781254613995206367556356043847113275469835476930164333611866390055374126257631311396081588015249535095794226808958824145769067353299646854353388151153910094130354904989875292917969790657956775277520106807703662905596988413564198879843318326882946386160877938995194666625956089067685335956339227140776133438619361465011076671695009803663318529187415177920764188103197260689566026219151352243585573536153289729902798366456545101 
n=51264492488660889019848769129544411965258569422381347096658086706608022904190858712166372844324608410846940605554048697545353174991887343479937224853887184972769302675544410931841240309682329987459509000988980981168420828049447238570742627402995246403869318312791127437656803992479016385455346624049862049614522792917039918097528167023442884605082840385629297668098403078994119627748582751721425389690056195577558695815325547555432293875209229831038199012261885490793857380456675881544906306090817468514838735695258158789209899455259030684852356493154997513254333054651920894086631319810998999271105687488897388337447717226719265989900764337354174961965554742431175942569436072711084991151088987007976606339348446620243841446781830155070338744751552177549691066685723389191245262905265477659435063546284779838075590392114687243416013350895238988507701964287924146990828145062506730552477614200912912639707220672107692155619 
et=51264492488660889019848769129544411965258569422381347096658086706608022904190858712166372844324608410846940605554048697545353174991887343479937224853887184972769302675544410931841240309682329987459509000988980981168420828049447238570742627402995246403869318312791127437656803992479016385455346624049862049614522792917039918097528167023442884605082840385629297668098403078994119627748582751721425389690056195577558695815325547555432293875209229831038199012261884326427689474837749897637221537620979660642899467399667980033554923745301701493097036666622858899657650536458180772916805153790105644765867639365370191907850646151103512717010706593263479050408960825721607776440881722484106823697491439055470521607381732943772331681804810774951418482262648252094564031079897612731722844253506701899939491139323003740007187349932684600463915965483352144257543438032411513771784688011896041206399277077276162162393551413085402181800 
d=34176328325773926013232512753029607976839046281587564731105391137738681936127239141444248562883072273897960403702699131696902116661258228986624816569258123315179535117029607287894160206454886658306339333992653987445613885366298159047161751601996830935912878875194084958437869328319344256970231082699908033076348528611359945398352111348961923070055226923752865112065602052662746418499055167814283593126704130385039130543550365036954862583472819887358799341507922884285126316558499931758147691747319773761932978266445320022369949163534467662064691111081905933105100357638787181944536769193403763177245092910246794605233764100735675144673804395508986033605973883814405184293921148322737882464994292703647014404921155295848221121203207183300945654841765501396376020719931741821148562835671134599959660759548669160004791566621789733642610643655568096171695625354941009181189792007930694137599518051517441441595700942056934787867 
m=42 c=74088 m1=42 
-------> Finally, to encrypt a string, do something cheesy, like convert the
-------> string to hex and put "0x" on the front of it to turn it into a
-------> number. The math cares not how stupidly you feed it strings.
plaintext=Good humor man kills 12 m=6842141791422321041488037885198263966456996508813242674 c=320314213130919999416039262429142971573683812695845474988006221372903799891439136717864478986105180468423274583690050452222230843676266462088283314532142661682558024 m1=6842141791422321041488037885198263966456996508813242674 recovered-plaintext=Good humor man kills 12 

// ------------------------------------------------------------

40. Output of running racket on "40/test.rkt":

-------> server's plaintext message:
plaintext=Luke, I am your father! 
m=7323285674421614806767335879451831704126090307447386657 
-------> Encrypt plaintext 3 times using different public keys
n_0=1608464357686147455605246592620699222890406266125646567944207538996119520556637345020457350503339910113258085638964967845350916273019177166455201573187363 
n_1=4410984330557630448777955627036009367647344786079557543931259744505511916800022337202690966337348387520759345058567260013370553264213274503541553583477433 
n_2=5648445070147667564737475783200378830860375104013959178311087979986176277379809638242187409850563154999048450605344043749314579346652571706597197116032289 
-------> c_0, c_1, c_2 are the three respective residues mod n_0, n_1, n_2
c_0=668657736907860758842776821477342852863840380463419927362078969407823370177507371064426906576279795215122832917000075327981593013869540960260781145257468 
c_1=2212212014429746428256049068293948935169024227118171948618510213888069656110350441139600961687948879974460100736118778570064591156643056175474713981990563 
c_2=1569388080807633352906809970739914412943733419426051580756867076165286726386109127261567330013354319885647543357652324139374638566340149749474466519178073 
-------> m_s_n (for n in 0, 1, 2) are the product of the moduli
-------> EXCEPT n_n --- ie, m_s_1 is n_0 * n_2
m_s_0=24915202696436857373470341160056160534443698757416549300525323537750026927580861083000207154285537175885711206907772491857501669625035780674682424702103394427855927550877944680219974373641584610885990137343868977441136208055162331298500261870672995375029715621078121514237294279538629871967739462340130834137 
m_s_1=9085322571680554217573040565471197685989416847625089282307075232127618657308334870837916219761638667302737274576672917827682679669850961941512641343931005447032011544471578336123965262319132464904926673427799607070717233061707339371528025305844537307598769254396430962328312603232973864785106114841754763907 
m_s_2=7094911078014040186363985932847810571849718396487453145814832317380274428361291512781820706037113034756916843256525929717554793150452527298052556106898261228454575656804098763158133528537107575713153020674682802223175641397428231862751806522876601161187729321770501652478878261671151602764648415663191279179 
-------> result =
------->   (c_0 * m_s_0 * invmod(m_s_0, n_0)) +
------->   (c_1 * m_s_1 * invmod(m_s_1, n_1)) +
------->   (c_2 * m_s_2 * invmod(m_s_2, n_2)) mod N_012
result=392751568071471862369698231125237298714713688380068892127992197636355348885875894516095838144866412628790251932824631997395807933783662229840481993701383761558135393 
(cube-root result)=7323285674421614806767335879451831704126090307447386657 
recovered-pt=Luke, I am your father! 
